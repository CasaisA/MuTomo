#include "construction.hh"
#include "G4UnionSolid.hh"

MyDetectorConstruction::MyDetectorConstruction() {}

MyDetectorConstruction::~MyDetectorConstruction() {}

G4VPhysicalVolume *MyDetectorConstruction::Construct() {
  // Get material
  G4NistManager *nist = G4NistManager::Instance();
  G4Material *air = nist->FindOrBuildMaterial("G4_AIR");
  G4Material *iron =
      nist->FindOrBuildMaterial("G4_SILICON_DIOXIDE");     // Example: Aluminum
  G4Material *water = nist->FindOrBuildMaterial("G4_AIR"); // Example: Aluminum

  // Define world volume
  G4double worldSize = 15 * m;
  G4Box *worldBox =
      new G4Box("World", worldSize / 2, worldSize / 2, worldSize / 2);
  G4LogicalVolume *worldLogic =
      new G4LogicalVolume(worldBox, air, "WorldLogic");
  G4VPhysicalVolume *worldPhys = new G4PVPlacement(
      nullptr, G4ThreeVector(), worldLogic, "World", nullptr, false, 0);

  // Define Mickey Mouse Logo Geometry
  G4double headRadius = 2 * mm;
  G4double earRadius = 1 * mm;
  G4double earOffset = 2 * m; // Distance of ears from head center

  // Create head sphere
  G4Sphere *solidHead =
      new G4Sphere("Head", 0, headRadius, 0, 2 * M_PI, 0, M_PI);

  // Create ears
  G4Sphere *solidLeftEar =
      new G4Sphere("LeftEar", 0, earRadius, 0, 2 * M_PI, 0, M_PI);
  G4Sphere *solidRightEar =
      new G4Sphere("RightEar", 0, earRadius, 0, 2 * M_PI, 0, M_PI);

  // Position ears relative to head
  G4ThreeVector leftEarPos(-earOffset, headRadius - 1 * m, 0);
  G4ThreeVector rightEarPos(earOffset, headRadius - 1 * m, 0);

  // Combine solids using Boolean operations
  G4UnionSolid *headAndLeftEar = new G4UnionSolid(
      "Head+LeftEar", solidHead, solidLeftEar, nullptr, leftEarPos);
  G4UnionSolid *fullMickey = new G4UnionSolid(
      "MickeyLogo", headAndLeftEar, solidRightEar, nullptr, rightEarPos);

  // Logical volume
  G4LogicalVolume *logicMickey =
      new G4LogicalVolume(fullMickey, water, "MickeyLogo");

  // // Place in world
  // new G4PVPlacement(nullptr, G4ThreeVector(), logicMickey, "MickeyLogo",
  //                   worldLogic, false, 0, true);

  // Visualization Attributes
  G4VisAttributes *visAttributes =
      new G4VisAttributes(G4Colour(0.0, 0.0, 0.0)); // Black
  visAttributes->SetForceSolid(true);
  logicMickey->SetVisAttributes(visAttributes);
  // Define box
  G4double box_x = 15 * m;
  G4double box_y = 15 * m;
  G4double box_z = 10 * m;
  G4Box *box = new G4Box("Box", box_x / 2, box_y / 2, box_z / 2);

  // Define sphere (hole)
  G4double sphere_radius = 2 * m;
  G4Sphere *sphere =
      new G4Sphere("Sphere", 0, sphere_radius, 0, 2 * M_PI, 0, M_PI);

  // Position of the sphere relative to the box
  G4ThreeVector spherePosition(0, 0, 0); // Centered in the box
  // Define logical volume for the water filling the hole
  G4LogicalVolume *logicWater =
      new G4LogicalVolume(fullMickey, water, "LogicWater");

  // Subtract sphere from box
  G4SubtractionSolid *boxWithHole = new G4SubtractionSolid(
      "BoxWithHole", box, fullMickey, nullptr, spherePosition);
  // Define logical volume for the box with a hole
  G4LogicalVolume *logicBoxWithHole =
      new G4LogicalVolume(box, iron, "LogicBoxWithHole");

  // Place the box with hole in the world
  new G4PVPlacement(nullptr, G4ThreeVector(), logicBoxWithHole, "BoxWithHole",
                    worldLogic, false, 0);
  // // Place the water sphere in the box
  // new G4PVPlacement(nullptr, spherePosition, logicWater, "WaterInHole",
  //                   logicBoxWithHole, false, 0);

  return worldPhys;
}

void MyDetectorConstruction::ConstructSDandField() {
  // MySensitiveDetector *sensDet = new
  // MySensitiveDetector("SensitiveDetector");

  // logicDetector->SetSensitiveDetector(sensDet);
}
